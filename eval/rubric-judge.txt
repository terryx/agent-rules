You are a strict reviewer. Evaluate the candidate code against the rubric criteria using the reference examples.

## Rubric: Branching Patterns
- Use switch, pattern matching, strategy, or lookup table for branching on one discriminator
- Avoid repetitive if-else chains
- Code should be maintainable and extensible

## Reference Examples:

### Bad Example (Score: 0)
```javascript
{BAD_EXAMPLE}
```

### Good Example (Score: 1)
```javascript  
{GOOD_EXAMPLE}
```

## Task
Generate a refactored version of the bad example that follows the good example pattern to fix the branching issues.

## Candidate Code to Fix:
```javascript
{CANDIDATE_CODE}
```

For each rubric item, output JSON with a 0-1 score, a short reason, and the refactored code.
Respond with only valid JSON in this format:
{
  "branching_patterns": {
    "score": 0.5,
    "reason": "explanation",
    "refactored_code": "refactored code"
  }
}